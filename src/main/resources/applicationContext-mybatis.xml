<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- 读取属性文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean>
	
	<!-- 数据源连接C3P0 -->

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}"></property>
		<property name="initialPoolSize" value="10" />
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="30" />
		<property name="acquireIncrement" value="5" />
		<property name="maxIdleTime" value="600" />
		<property name="maxStatements" value="0" />
	</bean>

	<!-- MyBatis的工厂（生产操作数据库的DAO），启动器。相当于： String resource = "org/mybatis/example/mybatis-config.xml"; InputStream inputStream 
		= Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); -->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- MyBatis的其它环境参数 -->
		<property name="configLocation" value="classpath:mybatis.xml" />
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- MyBatis的SessionTemplate。一般SqlSession可以由SqlSessionFactory的openSession()方法获得： SqlSession session = sqlSessionFactory.openSession(); 
		try { Blog blog1 = (Blog) session.selectOne("org.mybatis.example.BlogMapper.selectBlog", 101); BlogMapper mapper = session.getMapper(BlogMapper.class); 
		Blog blog2 = mapper.selectBlog(101); } finally { session.close(); } -->

	<bean id="simpleSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg index="1" value="SIMPLE" />
	</bean>
	
	<bean id="batchSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg index="1" value="BATCH" />
	</bean>


	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!--配置事务处理策略，transaction-manager属性指定事务管理器。 若事务管理器bean的id即为transactionManager，则 transaction-manager的属性可以不指定 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--所有以query开头的方法都是只读的 -->
			<tx:method name="query*" read-only="true" propagation="SUPPORTS" />
			<!--其他方法使用默认事务策略 -->
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- AOP配置 -->
	<aop:config>
		<!--pointcut元素定义一个切入点，execution中的第一个星号 用以匹配方法的返回类型，这里星号表明匹配所有返回类型。 com.abc.dao.*.*(..)表明匹配com.abc.dao包下的所有类的所有 方法 -->
		<!-- <aop:pointcut id="myPointcut" expression="execution(* *..BaseService.*(..))" /> -->
		<!--将定义好的事务处理策略应用到上述的切入点 -->
		<!-- <aop:advisor advice-ref="transactionAdvice" pointcut-ref="myPointcut" /> -->
		<aop:advisor pointcut="execution(* *..BaseService.*(..))" advice-ref="transactionAdvice" />
	</aop:config>
</beans>